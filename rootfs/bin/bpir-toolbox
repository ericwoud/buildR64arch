#!/bin/bash

#############
# Functions #
#############
function getconf {
  local conf=$(cat /boot/bootcfg/${2} 2>/dev/null)
  if [ -z "$conf" ]; then
    conf="${3}"
    [[ "${1}" == "w" ]] && echo -n "${conf}" >"/boot/bootcfg/${2}"
  fi
  echo "${conf}"
}

function getdev {
  blkid -t "PARTLABEL=$1" -l -o device
}

function imageid_noarchive {
  od --skip-bytes=$((4*14)) --read-bytes=4 --address-radix=n -x ${1} \
    | sed 's/ //g'
}

function imageid {
  if [[ "$(file -b --mime-type ${1})" == "application/x-xz" ]]; then
    zstd -dcf --format=xz ${1} | imageid_noarchive -
  else
    imageid_noarchive ${1}
  fi
}

function get_emmcbootpart {
  local bootpart="0"$(mmc extcsd read ${1} | grep PARTITION_CONFIG | cut -f 2 -d'0' | cut -f 1 -d']')
  echo $(( ($bootpart & 0x38) >> 3 ))
}

function set_emmcbootpart {
  [ ${2} -eq $(get_emmcbootpart ${1}) ] && return
  mmc bootpart enable ${2} 1 ${1}
}

function mtdnr {
  cat /proc/mtd | grep '"'$1'"' | cut -d':' -f1 | tr -d [:alpha:]
}

function ubivol {
  for u in /sys/class/ubi/${ubidev/"/dev/"/}_*/name; do
    if [[ "$(cat $u)" == "$1" ]]; then
      echo $(basename $(dirname $u))
      return
    fi
  done
}

function ubiupdate {
  if ! diff -q "$1" "$2"; then
    echo "Updating "$(basename $1)" on NAND:"
    cp -vf "$1" "$2"
  fi
}

function get_ubidev {
  local ubidevice
  ubidevice="$(basename /sys/class/mtd/mtd${1}/ubi*)"
  [ ! -e "/sys/class/ubi/$ubidevice" ] && return 1
  echo "/dev/$ubidevice"
  return 0
}


function write_extlinux {
  mkdir -p $(dirname "$1")
  cat <<-EOF | tee "$1"
	DEFAULT linux-bpir-git
	  MENU title U-Boot menu
	  PROMPT 0
	  TIMEOUT 50
	LABEL linux-bpir-git
	  MENU LABEL Archlinux AUR package BananaPi Routers
	  LINUX ${2}
	  INITRD ${3}
	  FDT ${4}
	EOF
# Here append's double root= ?!?!?!
}

function write_dtb {
  cp -vf "$3" "${tmp}/fixed.dtb"
  rm -rf ${tmp}/dtbos/* 
  for dts in "${@:4}"; do
    dtsname=$(basename $dts)
    echo "Creating .dtbo from $dtsname"
    cat $dts | grep -v -e '^#define' > "${tmp}/dtbos/${dtsname}"
    cat $dts | grep -e '^#define' | while read -r line ; do
      macroname=$(echo "${line}" | tr -s ' \t' ' ' | cut -d ' ' -f 2)
      macrotext=$(echo "${line}" | tr -s ' \t' ' ' | cut -d ' ' -f 3)
      if [ -n "${macroname}" ]; then
        echo "Applying #define ${macroname} = ${macrotext}"
        sed -i "s/${macroname}/${macrotext}/g" "${tmp}/dtbos/${dtsname}"
      fi
    done
    cat $dts | grep "//fdtput" | while read -r line ; do
      echo fdtput "${tmp}/fixed.dtb" ${line/"//fdtput"/""}
           fdtput "${tmp}/fixed.dtb" ${line/"//fdtput"/""}
    done
    dtc -@ -q -I dts -O dtb -o "${tmp}/dtbos/${dtsname/.dts/.dtbo}" \
        "${tmp}/dtbos/${dtsname}"
  done
  fdtoverlay -vi "${tmp}/fixed.dtb" -o "$1" \
                  ${tmp}/dtbos/*.dtbo
  origargs=$(fdtget -ts "$1" "/chosen" "bootargs")
  bootargs="$2 $origargs $cmdline"
  echo BOOTARGS = "$bootargs"
  fdtput -ts "$1" "/chosen" "bootargs" "$bootargs"
  fdtput -ts "$1" "/memory" "device_type" "memory"
  d1=$(printf "%x" $((ddrsize >> 2)) )
  d2=$(printf "%x" $(( $((ddrsize << 2)) & 15 )) )
  fdtput -tx "$1" "/memory" "reg" 00 40000000 0${d1} ${d2}0000000
  if [ -f "$initrd" ];then
    ins="0x48000000"
    ine="0x$(printf '%x\n' $(( $ins + $(du -b $initrd | cut -f1) )))"
    fdtput -tx "$1" "/chosen" "linux,initrd-end" "$ine"
    fdtput -tx "$1" "/chosen" "linux,initrd-start" "$ins"
  else
    echo -n "EMPTYBYT" > "$tmp/initrd"
    initrd="$tmp/initrd"
  fi
  if [ ! -f "$1" ];then
    echo -n "EMPTYBYT" > "$tmp/atfdtb"
    atfdtb="$tmp/atfdtb"
  fi
}

function download {
  echo "Download $1..."
  pkg=$(cat $tmp/ericwoud/$1-*/desc | grep "%FILENAME%" -A1 | head -n 2 | tail -n1)
  [ -z "$pkg" ] && return
  until curl -L $repo'/'$pkg | xz -dc - | tar x -mC /
  do sleep 2; done
}

#################
# Set variables #
#################
tmp="/tmp/bpir-toolbox-tmp"
rootdev=$(lsblk -pilno name,type,mountpoint | grep -G 'part /$' | head -n1 | cut -d " " -f1)
if [ -z "$rootdev" ]; then
  if [ -f "/etc/bpir-is-initrd" ] && [[ $@ =~ "--nand-" ]]; then # Writing NAND while running from initrd
    source /etc/bpir-is-initrd
    mkdir -p "$tmp/ericwoud"
    repo="ftp://ftp.woudstra.mywire.org/repo/aarch64"
    until curl -L ${repo}/ericwoud.db | tar -xz -mC "$tmp/ericwoud"
    do sleep 2; done
    download linux-${target}-git
    [ ! -f /boot/Image ] && download linux-bpir-git
    download bpir-atf-git
    download bpir-uboot-git
  else
    echo "Need to mount '/' first (and '/boot' if applicable)"
    exit 1
  fi
else
  partlabelroot=$(blkid $rootdev -s PARTLABEL -o value)
  [ -z "$partlabelroot" ] && exit
  target=$(echo $partlabelroot | cut -d'-' -f1)
fi

case ${target} in
  bpir64) default_ddrsize=1;;
  bpir3)  default_ddrsize=2;;
  bpir3m) default_ddrsize=2;;
  bpir4)  default_ddrsize=4;;
  *)      echo "Unknown target ${target}"; exit 1;;
esac
default_dtb="${target/m/-mini}"
default_dtb="${default_dtb/bpir/-bananapi-bpi-r}"
default_dtb=$(shopt -s nullglob; cd /boot/dtbs; echo "mt"*"${default_dtb}.dtb" | head -n 1)
default_dtb="${default_dtb/.dtb/}"

[ ! -f "$(cat /boot/bootcfg/initrd 2>/dev/null)" ] && rm -f "/boot/bootcfg/initrd"

extlinux="/boot/extlinux/extlinux.conf"

mkdir -p "${tmp}/dtbos"
mkdir -p /boot/bootcfg
dtb=$(     getconf w dtb     "$default_dtb")
device=$(  getconf w device  "$(echo $partlabelroot | cut -d'-' -f2)")
linux=$(   getconf w linux   "/boot/Image")
cmdline=$( getconf w cmdline "console=ttyS0,115200 debug=7 rw rootwait audit=0")
initrd=$(  getconf w initrd  "/boot/initramfs-bpir.img")
atfdtb=$(  getconf w atfdtb  "/boot/dtbs/${dtb}-atf.dtb")
ddrsize=$( getconf r ddrsize "$default_ddrsize")

########## cleanup *-atf.dtb

extra=""
[[ "$ddrsize" != "$default_ddrsize" ]] && extra+="-${ddrsize}gb"
[ -d "/usr/share/bpir-atf" ] && atfdir="/usr/share/bpir-atf" || atfdir="/boot"
headerfile="${atfdir}/${target}-atf-${device}-header${extra}.bin"
atffile="${atfdir}/${target}-atf-${device}-atf${extra}.bin"
bl31file="${atfdir}/${target}-atf-${device}-bl31${extra}.bin"

# Copy DTBO's if there are none.
if [ ! -d "/boot/dtbos/" ]; then
  mkdir -p "/boot/dtbos/"
  cp -vf /usr/share/buildR64arch/boot/${target^^}/*             "/boot/dtbos/" 2>/dev/null
  cp -vf /usr/share/buildR64arch/boot/${target^^}-${device^^}/* "/boot/dtbos/" 2>/dev/null
fi

#########################################
# Convert boot to FIP or BOOT partition #
#########################################

if [[ $@ =~ "--fip2boot" ]] || [[ $@ =~ "--boot2fip" ]]; then
  rm -rf $tmp/boot; mkdir $tmp/boot
  echo "Copying files from /boot to $tmp/boot"
  cp -rfT /boot/ $tmp/boot
  sync
  fipdevice=$(getdev ${target}-${device}-fip)
  [ -z "$fipdevice" ] && fipdevice=$(getdev ${target}-${device}-boot)
  [ -z "$fipdevice" ] && exit
  pkfip=$(lsblk -rno pkname ${fipdevice})
  [ -z "$pkfip" ] && exit
  nrfip=$(cat "/sys/block/${pkfip}/$(basename ${fipdevice})/partition")
  [ -z "$nrfip" ] && exit
  while mountpoint -q /boot; do umount -R /boot; sleep 0.1; done
  if [[ $@ =~ "--fip2boot" ]]; then
    parted -s -- "/dev/$pkfip" name $nrfip ${target}-${device}-boot \
                               set  $nrfip boot on
    mkfs.vfat -v -F 32 -S 512 -s 16 -n "${target^^}-BOOT" ${fipdevice}
    rm -rf /boot; mkdir /boot; chmod 0700 /boot
    sync
    while mount ${fipdevice} /boot 2>/dev/null; ! mountpoint -q /boot
    do echo "Waiting for /boot being mounted..."; sleep 0.1; done
  else
    parted -s -- "/dev/$pkfip" name $nrfip ${target}-${device}-fip
    rm -rf /boot; mkdir /boot; chmod 0700 /boot
  fi
  echo "Copying files from $tmp/boot to /boot"
  cp -rfT $tmp/boot /boot
  sync
  exit
fi

########################
# Write ATF bootloader #
########################
if [[ $@ =~ "--atf" ]]; then
  atfdevice=$(getdev "${target}-${device}-atf")
  if [ -n "${atfdevice}" ]; then
    headerdev="/dev/"$(lsblk -no pkname ${atfdevice})
    if [ -f "${headerfile}" ]; then
      echo Writing ${headerfile} to ${headerdev}
      dd if="${headerfile}" of="${headerdev}" conv=fsync
    fi
    echo -e "Target = ${target}, ATF device = ${device}"
    if [ -f "${atffile}" ]; then
      echo "Zeroing: ${atfdevice}"
      dd bs=64k if=/dev/zero of="${atfdevice}" conv=fsync 2>/dev/null
      echo "Writing ${atffile} to ${atfdevice}"
      dd bs=64k if="${atffile}" of="${atfdevice}" conv=fsync
    else
      echo "Atf binary does not exist: ${atffile}"
    fi
    if [ -b "${headerdev}boot0" ]; then # Writing to EMMC boot device
      hdr=$(head -c 4 "${atfdevice}")
      if [[ "${hdr}" == "SDMM" ]] || [[ "${hdr}" == "BRLY" ]]; then
        echo "Customised ATF able to boot from ${headerdev}"
        set_emmcbootpart ${headerdev} 7
      else
        echo -e "ATF needs boot from ${headerdev}boot0, copying..."
        echo 0 > /sys/block/${headerdev/'/dev/'/}boot0/force_ro
        dd bs=4M if="${atfdevice}" of="${headerdev}boot0" conv=fsync
        echo 1 > /sys/block/${headerdev/'/dev/'/}boot0/force_ro
        set_emmcbootpart ${headerdev} 1
      fi
    fi
  fi
  exit
fi

###############
# Format NAND #
###############
if [[ $@ =~ "--nand-format" ]]; then
  [[ "$(tr -d '\0' 2>/dev/null </proc/device-tree/compatible)" != "bananapi,"* ]] && exit 1
  i=0
  ubinr=$(mtdnr ubi)
  ubidetach -p /dev/mtd${ubinr}
  ubiformat -y /dev/mtd${ubinr}
  ubiattach -p /dev/mtd${ubinr}
  ubidev=$(get_ubidev ${ubinr})
  [[ $? != 0 ]] && exit
  [[ "$ubidev" == "/dev/ubi_ctrl" ]] && exit 1
  ubimkvol ${ubidev} -n $i -N fip       -s 1MiB   -t static
  ((i++))
  ubimkvol ${ubidev} -n $i -N ubootenv  -s 128KiB
  ((i++))
  ubimkvol ${ubidev} -n $i -N ubootenv2 -s 128KiB
  ((i++))
  ubimkvol ${ubidev} -n $i -N rootfs    -m
  while [ ! -e "${ubidev}_$i" ]; do sleep 0.1; done
  mkfs.ubifs ${ubidev}_$i
fi


###############
# Update NAND #
###############
if [[ $@ =~ "--nand-update" ]] || [[ $@ =~ "--nand-format" ]]; then
  [[ "$(tr -d '\0' 2>/dev/null </proc/device-tree/compatible)" != "bananapi,"* ]] && exit 1
  ubinr=$(mtdnr ubi)
  fipnr=$(mtdnr fip)
  bl2nr=$(mtdnr bl2)
  atfbin="/usr/share/bpir-atf/${target}-atf-spim-nand-atf.bin"
  dd if=/dev/mtdblock${bl2nr} of="$tmp/dump.bin" bs=$(du -b "$atfbin" | cut -f1) count=1 >/dev/null 2>&1
  #nanddump -nf "$tmp/dump.bin" -l $(du -b "$atfbin" | cut -f1) /dev/mtd${bl2nr}
  if ! diff "$tmp/dump.bin" "$atfbin"; then
    echo "Updating bl2 on NAND:"
    dd if="$atfbin" of=/dev/mtdblock${bl2nr}
    #flashcp -v "$atfbin" /dev/mtd${bl2nr}
  fi
  ubidev=$(get_ubidev ${ubinr})
  if [[ $? != 0 ]]; then
    ubiattach -p /dev/mtd${ubinr}
    ubidev=$(get_ubidev ${ubinr})
    [[ $? != 0 ]] && exit
  fi
  if [[ "$ubidev" == "/dev/ubi_ctrl" ]] || [[ "$ubidev" == "/dev/ubi*" ]]; then exit 1; fi
  ubifip=$(ubivol fip)
  fiptool --verbose create $tmp/fip.bin --nt-fw "/usr/share/bpir-uboot/u-boot-${target}-emmc.bin"
  fiptool info $tmp/fip.bin
  dd if=${ubifip} of="$tmp/dump.bin"
  if ! diff "$tmp/dump.bin" "$tmp/fip.bin"; then
    echo "Updating fip on NAND"
    ubiupdatevol ${ubifip} $tmp/fip.bin
  fi
  ubirootfs=$(ubivol rootfs)
  mkdir -p $tmp/mnt
  mount -t ubifs ${ubirootfs} $tmp/mnt
  while ! mountpoint -q $tmp/mnt; do sleep 0.1; done
  mkdir -p $tmp/mnt/boot/extlinux $tmp/mnt/boot/dtbs
  [ -f "${linux}.gz" ] && ubootlinux="${linux}.gz" || ubootlinux="${linux}"
  write_dtb "$tmp/atf.dtb" \
            "root=" \
            "/boot/dtbs/${dtb}.dtb" \
	    /usr/share/buildR64arch/boot/${target^^}/*.dts \
	    /usr/share/buildR64arch/boot/${target^^}-EMMC/*.dts
  ubiupdate "$tmp/atf.dtb" "$tmp/mnt/boot/dtbs/mt7986a-bananapi-bpi-r3-atf.dtb"
  write_extlinux "$tmp/extlinux.conf" \
                 "${ubootlinux}" \
                 "${initrd}" \
                 "${atfdtb}"
  ubiupdate "$tmp/extlinux.conf" "$tmp/mnt/boot/extlinux/extlinux.conf"
  ubiupdate "$ubootlinux" "$tmp/mnt$ubootlinux"
  ubiupdate "$initrd" "$tmp/mnt$initrd"
  sync
  ls -lR $tmp/mnt
  while mountpoint -q $tmp/mnt; do umount $tmp/mnt; sleep 0.1; done
  exit
fi

############
# EXTLINUX #
############
if [[ $@ =~ "--extlinux" ]] || ( [[ $@ =~ "--uboot-install" ]] && [ ! -f "$extlinux" ] ) ; then
  write_extlinux "${extlinux}" \
                 "${linux:5}" \
                 "${initrd:5}" \
                 "${atfdtb:5}"
  [[ $@ =~ "--extlinux" ]] && exit
fi

##############
# U-BOOT PKG #
##############
if [[ $@ =~ "--uboot-install" ]]; then
  cp -vf /usr/share/bpir-uboot/u-boot-${target}.bin /boot/u-boot.bin # This is the file that boots
  exit
fi

if [[ $@ =~ "--uboot-remove" ]]; then
  rm -vf "/boot/u-boot.bin"
  rm -vf $extlinux
  rmdir -v $(dirname $extlinux)
  exit
fi

#########################################
# Create single dtb and write fip image #
#########################################
if [[ $@ =~ "--write2fip" ]]; then
  rm -v /boot/dtbos/*.dtbo /boot/dtbs/*-fixed.dtb 2>/dev/null # not used anymore
  write_dtb "$atfdtb" \
            "root=PARTLABEL=${partlabelroot}" \
            "/boot/dtbs/${dtb}.dtb" \
            /boot/dtbos/*.dts
  fipdevice=$(getdev ${target}-${device}-fip)
  if [ -n "${fipdevice}" ]; then
    fipfiles=""
    [ -f "$bl31file" ]   && fipfiles+=" --soc-fw $bl31file"
    [ -f "$linux" ]  && fipfiles+=" --nt-fw $linux"
    if [[ "$(imageid $linux)" == "5241644d" ]]; then # We have a linux kernel image
      [ -f "$atfdtb" ] && fipfiles+=" --nt-fw-config $atfdtb"
      [ -f "$initrd" ] && fipfiles+=" --tos-fw-extra2 $initrd"
    fi
    fiptool --verbose create $tmp/fip.bin $fipfiles
    fiptool info $tmp/fip.bin
    echo Writing FIP to: ${fipdevice}
    dd bs=1M of=${fipdevice} if=/dev/zero conv=fsync 2>/dev/null
    dd bs=1M of=${fipdevice} if=$tmp/fip.bin conv=fsync
  fi
  exit
fi

exit 0

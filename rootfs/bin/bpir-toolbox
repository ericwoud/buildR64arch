#!/bin/bash

#############
# Functions #
#############
function getconf {
  conf=$(cat /boot/bootcfg/${1} 2>/dev/null)
  if [ -z "$conf" ]; then
    conf="${2}"
    echo -n "${conf}" >"/boot/bootcfg/${1}"
  fi
  echo "${conf}"
}

#################
# Set variables #
#################
rootdev=$(lsblk -pilno pkname,type,mountpoint | grep -G 'part /$' |  head -n1 | cut -d " " -f1)
partlabelroot=$(lsblk -plno partlabel $rootdev | grep -G '\-root$' )
[ -z "$partlabelroot" ] && exit
target=$(echo $partlabelroot | cut -d'-' -f1)

default_dtb="${target/m/-mini}"
default_dtb="${default_dtb/bpir/-bananapi-bpi-r}"
default_dtb=$(shopt -s nullglob; cd /boot/dtbs; echo "mt"*"${default_dtb}.dtb" | head -n 1)
default_dtb="${default_dtb/.dtb/}"

[ ! -f "$(cat /boot/bootcfg/initrd 2>/dev/null)" ] && rm -f "/boot/bootcfg/initrd"

extlinux="/boot/extlinux/extlinux.conf"

tmp="/tmp/bpir64-atf-git"
mkdir -p $tmp
mkdir -p /boot/bootcfg
dtb=$(       getconf dtb     "$default_dtb")
atfdevice=$( getconf device  "$(echo $partlabelroot | cut -d'-' -f2)")
linux=$(     getconf linux   "/boot/Image")
cmdline=$(   getconf cmdline "console=ttyS0,115200 debug=7 rw rootwait audit=0")
initrd=$(    getconf initrd  "/boot/initramfs-bpir.img")
atfdtb=$(    getconf atfdtb  "/boot/dtbs/${dtb}-atf.dtb")

########## cleanup *-atf.dtb

fipdevicel="/dev/disk/by-partlabel/${target}-${atfdevice}-fip"
bootdevicel="/dev/disk/by-partlabel/${target}-${atfdevice}-boot"
atfdevicel="/dev/disk/by-partlabel/${target}-${atfdevice}-atf"

#######################
# Convert FIP to BOOT #
#######################
if [[ $@ =~ "--fip2boot" ]] && [ -L ${fipdevicel} ]; then
  set -e
  pkfip=$(lsblk -rno pkname ${fipdevicel})
  nrfip=$(cat "/sys/block/${pkfip}/$(basename $(realpath ${fipdevicel}))/partition")
  if [ -z "$pkfip" ] || [ -z "$nrfip" ]; then exit; fi
  [ -e $tmp/boot ] && rm -rf $tmp/boot
  echo "Moving files from /boot to $tmp/boot"
  mv -fT /boot $tmp/boot
  parted -s -- "/dev/$pkfip" name $nrfip ${target}-${atfdevice}-boot \
                             set  $nrfip boot on
  until [ -b ${bootdevicel} ]; do sleep 1; done
  mkfs.vfat -v -F 32 -S 512 -s 16 -n "${target^^}-BOOT" ${bootdevicel}
  mkdir /boot
  mount -t vfat ${bootdevicel} /boot
  echo "Copying files from $tmp/boot to /boot"
  cp -rfT $tmp/boot /boot
  set +e
fi

#######################
# Convert BOOT to FIP #
#######################
if [[ $@ =~ "--boot2fip" ]] && [ -L ${bootdevicel} ]; then
  set -e
  pkfip=$(lsblk -rno pkname ${bootdevicel})
  nrfip=$(cat "/sys/block/${pkfip}/$(basename $(realpath ${bootdevicel}))/partition")
  if [ -z "$pkfip" ] || [ -z "$nrfip" ]; then exit; fi
  [ -e $tmp/boot ] && rm -rf $tmp/boot
  mkdir $tmp/boot
  echo "Copying files from /boot to $tmp/boot"
  cp -rfT /boot/ $tmp/boot
  while mountpoint /boot; do umount /boot; sleep 1; done
  parted -s -- "/dev/$pkfip" name $nrfip ${target}-${atfdevice}-fip
  until [ -b ${fipdevicel} ]; do sleep 1; done
  rm -rf /boot
  echo "Moving files from $tmp/boot to /boot"
  mv -fT $tmp/boot /boot
  set +e
fi

########################
# Write ATF bootloader #
########################
if [[ $@ =~ "--atf" ]]; then
  if [ -L ${atfdevicel} ]; then
    headerdev="/dev/"$(lsblk -no pkname ${atfdevicel})
    headerfile="${target}-atf-${atfdevice}-header.bin"
    atffile="${target}-atf-${atfdevice}-atf.bin"
    if [ -f "/usr/share/bpir-atf/${headerfile}" ]; then
      fullheaderfile="/usr/share/bpir-atf/${headerfile}"
    else
      fullheaderfile="/boot/${headerfile}"
    fi
    if [ -f "/usr/share/bpir-atf/${atffile}" ]; then
      fullatffile="/usr/share/bpir-atf/${atffile}"
    else
      fullatffile="/boot/${atffile}"
    fi
    if [ -f "${fullheaderfile}" ]; then
      echo Writing ${headerfile} to ${headerdev}
      dd if="${fullheaderfile}" of="${headerdev}" conv=fsync
    fi
    echo -e "Target = ${target}, ATF device = ${atfdevice}"
    if [ -f "${fullatffile}" ]; then
      echo "Zeroing: ${atfdevicel}"
      dd bs=64k if=/dev/zero of="${atfdevicel}" conv=fsync 2>/dev/null
      echo "Writing ${atffile} to ${atfdevicel}"
      dd bs=64k if="${fullatffile}" of="${atfdevicel}" conv=fsync
      if [ -b ${headerdev}"boot0" ] && [ -b ${headerdev}"boot1" ]; then
        bootpart="0"$(mmc extcsd read ${headerdev} | grep PARTITION_CONFIG | cut -f 2 -d'0' | cut -f 1 -d']')
        bootpart=$(( ($bootpart & 0x38) >> 3 ))
        echo "EXTCSD bootpart = $bootpart"
        [ "$bootpart" -eq "1" ] && bootx="boot0"
        [ "$bootpart" -eq "2" ] && bootx="boot1"
        if [ ! -z "$bootx" ]; then
          echo -e "Copying atf to ${headerdev}${bootx}"
          echo 0 > /sys/block/${headerdev/'/dev/'/}${bootx}/force_ro
          dd bs=4M if="${atfdevicel}" of="${headerdev}${bootx}" conv=fsync
          echo 1 > /sys/block/${headerdev/'/dev/'/}${bootx}/force_ro
        fi
      fi
    fi
  fi
fi

############
# EXTLINUX #
############
if [[ $@ =~ "--extlinux" ]] || ( [[ $@ =~ "--uboot-install" ]] && [ ! -f "$extlinux" ] ) ; then
  mkdir -p $(dirname $extlinux)
  cat <<-EOF | tee $extlinux
	DEFAULT linux-bpir64-git
	  MENU title U-Boot menu
	  PROMPT 0
	  TIMEOUT 50
	LABEL linux-bpir64-git
	  MENU LABEL Archlinux AUR package BananaPi Routers
	  LINUX ${linux:5}
	  INITRD ${initrd:5}
	  FDT ${atfdtb:5}
	  APPEND root=PARTLABEL=${partlabelroot} $cmdline
	EOF
  exit
fi

##############
# U-BOOT PKG #
##############
if [[ $@ =~ "--uboot-install" ]]; then
  cp -vf /usr/share/bpir-uboot/u-boot-${target}.bin /boot/u-boot.bin # This is the file that boots
  exit
fi

if [[ $@ =~ "--uboot-remove" ]]; then
  rm -vf "/boot/u-boot.bin"
  rm -vf $extlinux
  rmdir -v $(dirname $extlinux)
  exit
fi

###############
# Copy DTBO's #
###############
if [ ! -d "/boot/dtbos/" ]; then
  mkdir -p "/boot/dtbos/"
  cp -vf /usr/share/buildR64arch/boot/${target^^}/*                "/boot/dtbos/" 2>/dev/null
  cp -vf /usr/share/buildR64arch/boot/${target^^}-${atfdevice^^}/* "/boot/dtbos/" 2>/dev/null
fi

#################
# Create DTBO's #
#################
cp -vf "/boot/dtbs/${dtb}.dtb" "/boot/dtbs/${dtb}-fixed.dtb"
rm -rf /boot/dtbos/*.dtbo
for bp in /boot/dtbos/*.dts; do
  echo "Creating .dtbo from $(basename $bp)"
  dtc -@ -q -I dts -O dtb -o ${bp/".dts"/".dtbo"} $bp
  cat $bp | grep "//fdtput" | while read -r line ; do
    echo fdtput "/boot/dtbs/${dtb}-fixed.dtb" ${line/"//fdtput"/""}
         fdtput "/boot/dtbs/${dtb}-fixed.dtb" ${line/"//fdtput"/""}
  done
done

########################
# Create a single .dtb #
########################
fdtoverlay -vi "/boot/dtbs/${dtb}-fixed.dtb" -o "$atfdtb" \
                /boot/dtbos/*.dtbo
origargs=$(fdtget -ts "$atfdtb" "/chosen" "bootargs")
bootargs="root=PARTLABEL=${partlabelroot} $origargs $cmdline"
echo BOOTARGS = "$bootargs"
fdtput -ts "$atfdtb" "/chosen" "bootargs" "$bootargs"
fdtput -ts "$atfdtb" "/memory" "device_type" "memory"
if [ -f "$initrd" ];then
  ins="0x48000000"
  ine="0x$(printf '%x\n' $(( $ins + $(du -b $initrd | cut -f1) )))"
  fdtput -tx "$atfdtb" "/chosen" "linux,initrd-end" "$ine"
  fdtput -tx "$atfdtb" "/chosen" "linux,initrd-start" "$ins"
else
  echo -n "EMPTYBYT" > "$tmp/initrd"
  initrd="$tmp/initrd"
fi
if [ ! -f "$atfdtb" ];then
  echo -n "EMPTYBYT" > "$tmp/atfdtb"
  atfdtb="$tmp/atfdtb"
fi

##############################
# Create and write fip image #
##############################
if [ -L ${fipdevicel} ]; then
  bl31="/boot/${target}-atf-${atfdevice}-bl31.bin"
  imageid=$(od --skip-bytes=$((4*14)) --read-bytes=4 --address-radix=n -x \
              $linux | sed 's/ //g')
  fipfiles=""
  [ -f "$bl31" ]   && fipfiles+=" --soc-fw $bl31"
  [ -f "$linux" ]  && fipfiles+=" --nt-fw $linux"
  if [[ "$imageid" == "5241644d" ]]; then # We have a linux kernel image
    [ -f "$atfdtb" ] && fipfiles+=" --nt-fw-config $atfdtb"
    [ -f "$initrd" ] && fipfiles+=" --tos-fw-extra2 $initrd"
  fi
  fiptool --verbose create $tmp/fip.bin $fipfiles
  fiptool info $tmp/fip.bin
  echo Writing FIP to: ${fipdevicel}
  dd bs=1M of=${fipdevicel} if=/dev/zero conv=fsync 2>/dev/null
  dd bs=1M of=${fipdevicel} if=$tmp/fip.bin conv=fsync
fi

exit 0
